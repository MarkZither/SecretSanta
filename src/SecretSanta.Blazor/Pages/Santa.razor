@page "/santa"
@* @attribute [StreamRendering(true)] *@
@attribute [RenderModeServer]
@inject ILogger<Santa> Logger

<PageTitle>Secret Santa Generator</PageTitle>

<h1>Secret Santa Generator</h1>

<p role="status" class="@(ShouldShowStatus ? "d-show" : "d-none")">It's Done! Check your email!</p>

<div>
    <EditForm Model="@Model" OnValidSubmit="@AddName">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <label> Name:
            <InputText @bind-Value="Model!.Name" />
        </label>
        <label> Email:
            <InputText @bind-Value="Model!.Email" />
        </label>
        <button class="btn btn-primary">Add Name</button>
    </EditForm>
</div>

    @foreach (var nickname in Nicknames) {
    <li @key=nickname>
        @nickname
        <a @onclick="() => RemoveNickname(nickname)">Remove</a>
    </li>
}

<button class="btn btn-primary" @onclick="GenerateMatches">Generate</button>

@code {
    private EditContext? editContext;
    private bool ShouldShowStatus { get; set; } = false;
    public NewParticipant? Model { get; set; }

    [Parameter]
    public List<string> Nicknames { get; set; } = new List<string>();

    [Parameter]
    public EventCallback<List<string>> NicknamesChanged { get; set; }
    protected override async Task OnInitializedAsync()
    {
        Model ??= new();
        editContext = new(Model);
        Nicknames.Add("Mark");
        Nicknames.Add("Caitríona");
        Nicknames.Add("Bruce");
    }

    private void GenerateMatches() {
        ShouldShowStatus = true;
    }

    public async Task RemoveNickname(string nickname) {
        Nicknames.Remove(nickname);
        await NicknamesChanged.InvokeAsync(Nicknames);
    }

    private async Task AddName()
    {
        if (editContext != null && editContext.Validate()) {
        Nicknames.Add(Model.Name);
        await NicknamesChanged.InvokeAsync(Nicknames);
        }
        else {
            Logger.LogInformation("Submit called: Form is INVALID");
        }
    }
}
